// <auto-generated />
using System;
using EF_Project.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Project.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    partial class MyAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EF_Project.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("EF_Project.Entities.Course_Instructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Evaluate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Course_Instructor");
                });

            modelBuilder.Entity("EF_Project.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Hiring_Date")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MangerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MangerId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Project.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Bouns")
                        .HasColumnType("int");

                    b.Property<int>("Hour_rate")
                        .HasColumnType("int");

                    b.Property<int>("ManageDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkDepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("WorkDepartmentId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EF_Project.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Dept_Id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Dept_Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Project.Entities.Student_Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Course");
                });

            modelBuilder.Entity("EF_Project.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Project.Entities.Course", b =>
                {
                    b.HasOne("EF_Project.Entities.Topic", "Topic")
                        .WithMany("courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_Project.Entities.Course_Instructor", b =>
                {
                    b.HasOne("EF_Project.Entities.Course", null)
                        .WithMany("TeachedBy")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Instructor", null)
                        .WithMany("Teach")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Project.Entities.Department", b =>
                {
                    b.HasOne("EF_Project.Entities.Instructor", "Manger")
                        .WithOne("ManageDepartment")
                        .HasForeignKey("EF_Project.Entities.Department", "MangerId");

                    b.Navigation("Manger");
                });

            modelBuilder.Entity("EF_Project.Entities.Instructor", b =>
                {
                    b.HasOne("EF_Project.Entities.Department", "WorkDepartment")
                        .WithMany("Instructors")
                        .HasForeignKey("WorkDepartmentId");

                    b.Navigation("WorkDepartment");
                });

            modelBuilder.Entity("EF_Project.Entities.Student", b =>
                {
                    b.HasOne("EF_Project.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("Dept_Id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Project.Entities.Student_Course", b =>
                {
                    b.HasOne("EF_Project.Entities.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Student", null)
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Project.Entities.Course", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachedBy");
                });

            modelBuilder.Entity("EF_Project.Entities.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Project.Entities.Instructor", b =>
                {
                    b.Navigation("ManageDepartment")
                        .IsRequired();

                    b.Navigation("Teach");
                });

            modelBuilder.Entity("EF_Project.Entities.Student", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EF_Project.Entities.Topic", b =>
                {
                    b.Navigation("courses");
                });
#pragma warning restore 612, 618
        }
    }
}
